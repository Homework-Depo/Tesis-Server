generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  lastName  String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  secretKey String?
  clients   Client[]
  cases     Case[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Document  Document[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String
  status    Boolean  @default(true)
  dni       String
  phone     String
  email     String?
  users     User[]
  cases     Case[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Case {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  status       Boolean        @default(true)
  client       Client         @relation(fields: [clientId], references: [id])
  clientId     Int
  courtFile    CourtFile?
  officeBranch OfficeBranch[]
  lawBranch    LawBranch      @relation(fields: [lawBranchId], references: [id])
  lawBranchId  Int
  lawMatter    LawMatter      @relation(fields: [lawMatterId], references: [id])
  lawMatterId  Int
  files        File[]
  documents    Document[]
  users        User[]
  closedAt     DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model CourtFile {
  id        Int      @id @default(autoincrement())
  code      String
  court     String
  officer   String
  judge     String
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LawBranch {
  id         Int         @id @default(autoincrement())
  name       String
  lawMatters LawMatter[]
  cases      Case[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model LawMatter {
  id          Int       @id @default(autoincrement())
  name        String
  lawBranch   LawBranch @relation(fields: [lawBranchId], references: [id])
  lawBranchId Int
  cases       Case[]
}

model OfficeBranch {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String
  cases     Case[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  extension String
  // who are you? 
  path      String
  size      Int
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  content     String
  createdBy   User              @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  tags        Tag[]
  case        Case              @relation(fields: [caseId], references: [id])
  caseId      Int
  versions    DocumentVersion[]
}

model DocumentVersion {
  id         Int      @id @default(autoincrement())
  documentId Int
  document   Document @relation(fields: [documentId], references: [id])
  content    String
  createdAt  DateTime @default(now())
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  documents Document[]
}

enum Role {
  USER
  ADMIN
}
